<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | 乐の博客]]></title>
  <link href="http://blog.zhidong.info/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.zhidong.info/"/>
  <updated>2016-03-04T15:14:30+08:00</updated>
  <id>http://blog.zhidong.info/</id>
  <author>
    <name><![CDATA[Dongle Su]]></name>
    <email><![CDATA[agdsdl@sina.com.cn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-c Runtime 拾遗]]></title>
    <link href="http://blog.zhidong.info/blog/2016/03/04/objc-runtime-pickup/"/>
    <updated>2016-03-04T14:55:42+08:00</updated>
    <id>http://blog.zhidong.info/blog/2016/03/04/objc-runtime-pickup</id>
    <content type="html"><![CDATA[<h2>动态添加类</h2>

<p>我们通过<code>objc_allocateClassPair</code>、<code>class_addIvar</code>、<code>class_addMethod</code>、<code>objc_registerClassPair</code>来动态添加类。</p>

<p><code>objc_registerClassPair</code> 其中除了设置类状态，做的最重要的事是生成<code>ivar_layout</code>(在支持GC的情况下，所以ios中是没有这一步的)，<code>ivar_layout</code>保存了类strong变量的内存视图，runtime依赖他来管理strong变量。</p>

<p><code>ivar_layout</code>的结构<a href="!http://blog.sunnyxx.com/2015/09/13/class-ivar-layout/">阳神的博客里</a>有描述，这里就不写了。</p>

<p><code>objc_registerClassPair</code>之后，类的<code>instanceSize</code>已经确定，这个新类已经可以投入使用，这时就不允许调用<code>class_addIvar</code>了。</p>

<p><code>class_addIvar</code>主要是对<code>ivar_list</code>链表的操作，并相应的增加<code>instanceSize</code>。</p>

<p>参考：
<a href="http://www.opensource.apple.com/tarballs/objc4/">Apple 源码</a></p>

<h2>动态方法解析</h2>

<p>一个OC方法的实现本质上就是一个简单的c函数，这个c函数至少要有self和_cmd两个参数。你可以用<code>class_addMethod</code>来添加一个方法到类中。
如下c函数：
<code>
void dynamicMethodIMP(id self, SEL _cmd) {
    // implementation ....
}
</code>
可以这样使用：
<code>
@implementation MyClass
+ (BOOL)resolveInstanceMethod:(SEL)aSEL
{
    if (aSEL == @selector(resolveThisMethodDynamically)) {
          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, "v@:");
          return YES;
    }
    return [super resolveInstanceMethod:aSEL];
}
@end
</code>
<code>resolveInstanceMethod</code>和<code>resolveClassMethod</code>可以用来动态提供一个方法实现。</p>

<p>OC runtime做消息转发（Message Forwarding）时，在调用<code>respondsToSelector:</code>和<code>instancesRespondToSelector:</code>之前，会先调用上面两个方法，让你有机会来动态添加方法实现。</p>

<p>OC支持一种动态属性允许你动态提供它的实现方法。
<code>
@dynamic propertyName;
</code></p>

<p><a href="!https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html">参考</a></p>

<!-- more -->


<h2>消息转发</h2>

<p>系统发送消息给一个对象时，如果这个对象不能响应这个消息，在报错之前，系统会调用这个对象的<code>forwardInvocation:</code> 让它有机会来处理这个消息。
顾名思义就是消息转发，通过将消息转发给另一个对象，使得一个对象可以模拟另外一个对象的能力：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em&gt;
</span><span class='line'>forwardInvocation 需要MethodSignature来创建NSInvocation对象，因此这个方法也要提供。
</span><span class='line'>&lt;/em&gt;/
</span><span class='line'>- (NSMethodSignature &lt;em&gt;)methodSignatureForSelector:(SEL)aSelector&lt;br/&gt;
</span><span class='line'>{&lt;br/&gt;
</span><span class='line'>    NSMethodSignature&lt;/em&gt; signature = [super methodSignatureForSelector:aSelector];&lt;br/&gt;
</span><span class='line'>    if (signature==nil) {&lt;br/&gt;
</span><span class='line'>        signature = [someObj methodSignatureForSelector:aSelector];&lt;br/&gt;
</span><span class='line'>    }&lt;br/&gt;
</span><span class='line'>    NSUInteger argCount = [signature numberOfArguments];&lt;br/&gt;
</span><span class='line'>    for (NSInteger i=0 ; i&lt;argCount ; i++) {&lt;br/&gt;
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;return signature;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;(void)forwardInvocation:(NSInvocation *)anInvocation
</span><span class='line'>{
</span><span class='line'>  if ([someOtherObject respondsToSelector:
</span><span class='line'>          [anInvocation selector]])
</span><span class='line'>      [anInvocation invokeWithTarget:someOtherObject];
</span><span class='line'>  else
</span><span class='line'>      [super forwardInvocation:anInvocation];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
你可以用这种机制来模拟多继承。</li>
</ul>


<p>要真实的模拟多继承，你还必须重写这些方法：<code>respondsToSelector:</code> 、<code>isKindOfClass:</code>、<code>instancesRespondToSelector:</code>、如果继承对象中有协议，还需重写<code>conformsToProtocol:</code></p>

<h2>类型编码</h2>

<p>辅助OC runtime，编译器将参数及返回类型编码成字符串，并与方法selector关联。</p>

<p>@encode是个编译器操作符，用来获取一个类型的编码。所有可以用sizeof操作符的类型，都可以用@encode来获取它的类型。</p>

<p>常见编码见<a href="!https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">官方文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写一个iOS越狱插件(tweak)]]></title>
    <link href="http://blog.zhidong.info/blog/2016/02/04/write-a-tweak/"/>
    <updated>2016-02-04T15:38:29+08:00</updated>
    <id>http://blog.zhidong.info/blog/2016/02/04/write-a-tweak</id>
    <content type="html"><![CDATA[<p>折腾了几天，搞定一个tweak(FPSCounter)，把一些重要步骤记录一下。</p>

<h2>关于这个插件</h2>

<p>这是个帧速计数器(FPSCounter)，方便我们查看应用的帧速，从而做出相应优化。这里不仅可以看自己的应用，也可以看系统中其他应用。</p>

<h3>截图：</h3>

<p><img src="https://github.com/agdsdl/fpscounter/blob/master/images/preview1.jpg?raw=true" alt="preview1" />
<img src="https://github.com/agdsdl/fpscounter/blob/master/images/preview2.jpg?raw=true" alt="preview2" /></p>

<h3>如何安装</h3>

<ul>
<li>在Cydia中搜索<code>FPSCounter</code>.(你的Cydia中必须有BigBoss源)</li>
<li>或者到<a href="https://github.com/agdsdl/fpscounter">source code</a>下载后自行编译安装。</li>
</ul>


<h2>前提条件</h2>

<p>一个越狱的iOS设备。</p>

<p>需要越狱的设备来获取可用的CydiaSubstrate, 同时也需要越狱设备来安装和测试。</p>

<h2>安装和配置Theos</h2>

<p><a href="https://github.com/DHowett/theos.git">Theos</a>大大简化了tweak的编写，建议大家从Theos开始编写tweak。</p>

<p>按照<a href="http://iosre.com/">《iOS应用逆向工程》</a>中所述，将Theos<a href="https://github.com/DHowett/theos.git">下载</a>下来之后，还有一系列的配置。</p>

<p>我将这些配置工作写成了一个<a href="https://github.com/agdsdl/dotfiles/blob/master/init/82_jailbreak_tools.sh">脚本</a>,省去每次都做这些繁琐的配置。</p>

<p>这个脚本默认Theos是下载到“个人目录/jailbreak/Opensource”，如果不想修改脚本，可用使用与脚本相同的目录。</p>

<h2>配置默认路径</h2>

<p>修改.bash_profile文件，将~/jailbreak/Opensource/theos/bin加入到PATH中。</p>

<p>保存之后重新启动一下终端。</p>

<h2>获取iOS系统头文件</h2>

<p>按照<a href="http://iosre.com/">《iOS应用逆向工程》</a>的介绍，正规的获取方式是用dyld_decache从iOS设备中/System/Library/Caches/com.apple.dyld/dyld_shared_cache_armXX将二进制文件提取出来，然后用class-dump去把头文件提取出来。</p>

<p>为了方便起见，这里采用第二种方法，就是直接用<a href="https://github.com/rpetrich/iphoneheaders.git">rpetrich的头文件</a>。</p>

<p>将这些头文件放到Theos的include目录下。</p>

<p>开始编写tweak！</p>

<!-- more -->


<h2>新建一个tweak</h2>

<p>在终端运行nic.pl, 在出现的菜单中选择想要的tweak种类。</p>

<p>一般的tweak是选tweak类型。preference_bundle是可自定义的设置插件，如果你选择这种，会遇到一些奇怪的坑，下面会给出解决办法：）</p>

<p>普通的tweak会包含以下文件：</p>

<ul>
<li>control 包含deb包管理的基本信息</li>
<li>tweak.x 插件源文件，支持c， objectiveC，<a href="http://iphonedevwiki.net/index.php/Logos">Logos语法</a></li>
<li>XXX.plist 指明插件在哪些应用中加载</li>
<li>layout目录 相当于iOS设备根目录，里面的文件会被对应的安装到设备的对应位置。</li>
<li>Makefile make文件</li>
</ul>


<h2>修改make文件</h2>

<p>在Makefile最上面加上这两句：</p>

<pre><code class="Makefile">export ARCHS = armv7 armv7s arm64
export TARGET = iphone:clang:latest:7.0
</code></pre>

<p>上面一句表示要编译armv7 armv7s arm64三种cpu架构，</p>

<p>下面一句表示编译iPhone插件：用clang编译：用系统中最新SDK编译：目标系统是7.0（和以上）</p>

<h2>编译</h2>

<p>在终端输入：</p>

<pre><code class="bash">make
</code></pre>

<p>编译成功后，输入</p>

<pre><code class="bash">make package install
</code></pre>

<p>一条命令完成编译打包和安装。</p>

<p>如果有错误，请参考下面的问题。</p>

<h2>遇到的问题</h2>

<ul>
<li><p>报错找不到IOSurfaceAPI.h。解决办法：rpetrich头文件包里有这个文件，手动拷贝到include目录。</p></li>
<li><p>编译错误，报错architecture not supported。解决办法：如果是报错在.m文件或.mm文件，Theos对.m的支持不好，将其后缀改为.x文件或.xm文件一般就可以解决。</p></li>
<li><p>link错误，Undefined symbols。解决办法：Makefile中有XXX_FRAMEWORKS = UIKit，在这后面把你用到的framework都加上。</p>

<p>如果还用了其他的库，需要在Makefile中加上XXX_LDFLAGS = -lx，这里x是变量，代指库名。</p></li>
<li><p>make package install时报错：make install requires that you set THEOS_DEVICE_IP in your environment. It is also recommended that you have public-key authentication set up for root over SSH, or you will be entering your password a lot.</p>

<p>需运行<code>export THEOS_DEVICE_IP=你手机的ip地址</code>。</p>

<p>后面那句话是建议你把电脑ssh 公钥设为手机的authorized_keys，这样就不用每次输密码了。</p></li>
<li><p>在设备上插件不运行。解决办法：连上xcode看device log，是否是cpu type不支持或者其他原因。</p></li>
<li><p>如果还有问题，请仔细看编译警告、device log，并自己打log，直到确定问题所在。</p></li>
<li><p>tweak默认是mrc的，一定要正确保持和释放。这里不太建议改成ARC，除非<a href="http://iphonedevwiki.net/index.php/Using_ARC_in_tweaks">你知道你在干嘛</a>。</p></li>
</ul>


<h2>学习和模仿</h2>

<p>成长离不开学习和模仿，有以下途径可以模仿：</p>

<ul>
<li>在手机上用cydia查看已安装的tweak，看他们有哪些文件，然后用iFunbox将这些文件拷贝出来学习或逆向。</li>
<li>github上有大量开源的代码（比如大神rpetrich、DHowett等），可以看看别人是怎么写的。</li>
</ul>


<h2>参考</h2>

<p><a href="http://iphonedevwiki.net/index.php/Main_Page">http://iphonedevwiki.net/index.php/Main_Page</a></p>

<p><a href="https://www.andyibanez.com/creating-aggregate-projects-theos-configurable-tweak/">https://www.andyibanez.com/creating-aggregate-projects-theos-configurable-tweak/</a></p>

<p><a href="https://github.com/mlnlover11/TouchIDEverywhere/issues/2">https://github.com/mlnlover11/TouchIDEverywhere/issues/2</a></p>

<p><a href="https://github.com/DHowett/theos/issues/73">https://github.com/DHowett/theos/issues/73</a></p>

<p><a href="http://bbs.iosre.com/t/theos-make-error-unsupported-architecture/1196">http://bbs.iosre.com/t/theos-make-error-unsupported-architecture/1196</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Hybird开发 - 与OC交互]]></title>
    <link href="http://blog.zhidong.info/blog/2015/07/23/ios-hybirdkai-fa-yu-ocjiao-hu/"/>
    <updated>2015-07-23T17:23:57+08:00</updated>
    <id>http://blog.zhidong.info/blog/2015/07/23/ios-hybirdkai-fa-yu-ocjiao-hu</id>
    <content type="html"><![CDATA[<ul>
<li>原理：</li>
</ul>


<p>OC调用javascript是通过
<code>
[webView stringByEvaluatingJavaScriptFromString:@"document.title"];
</code></p>

<p>javascript调用OC一般是通过在页面中发起一个特定的url请求，然后在OC中响应
<code>
-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
</code>
在响应中判断此url，并做相应的动作。</p>

<p>开源库：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">https://github.com/marcuswestin/WebViewJavascriptBridge</a></p>

<!-- more -->


<ul>
<li>WebView体验优化</li>
</ul>


<p>若页面结构多于一级，如这个导航顺序pageA->pageB->pageC，这时支持页面的返回就很必要。
也就是从pageC可以返回到pageB，pageB可以返回到pageA。</p>

<p>一般我们通过pushViewController来打开webViewController，而webViewController中加载pageA。
导航到pageB，pageC都是在webViewController中进行。</p>

<p>在pageC中点击导航栏的返回按钮的话，默认会退回到webViewController的上一级页面，而不是从pageC返回到pageB。
这就需要对导航栏的返回按钮做处理。为了优化体验，还需要到滑动手势做特殊处理。</p>

<p>开源库：<a href="https://github.com/agdsdl/DLPanableWebView">https://github.com/agdsdl/DLPanableWebView</a></p>

<ul>
<li>参数传递</li>
</ul>


<p>如上例，我们打开pageA时可以通过<code>[webView stringByEvaluatingJavaScriptFromString:@"document.title"];</code>来传参数给pageA
如果从pageA导航到pageB，要传递一个id到pageB，这时参数要怎么传递？
<code>stringByEvaluatingJavaScriptFromString</code>会将参数传给所有web页，用这个函数会导致我们的代码无比混乱。
目前业界常用的方式是通过sessionStorage, localStorage。localStorage是本地存储，长期有效。sessionStorage是会话期间的存储，一旦关闭webView，存储就会消失。
我们在项目中使用的时sessionStorage.</p>

<ul>
<li>插件化</li>
</ul>


<p>为了节省加载时间，提升用户体验，我们可以web功能模块打包成zip文件，一次性下载到本地。
使用时直接从本地加载，可以大大减少加载时间，同时也能节省不少带宽。</p>

<ul>
<li>调试</li>
</ul>


<p>纯web页面用chrome调试最方便。</p>

<p>hybird开发中的webView用safari调试即可。
 * 在safari选项中勾选“显示开发菜单”。
 * 在手机或模拟器打开web页面的时候，在开发菜单中选择调试的页面。</p>

<ul>
<li>一些坑</li>
<li>stringByEvaluatingJavaScriptFromString要放在主线程调用。</li>
<li>从OC回调到js时，不能立即弹出alert，哪怕延时0秒弹出都行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Hybird开发 - Web基础]]></title>
    <link href="http://blog.zhidong.info/blog/2015/07/23/ios-hybirdkai-fa-webji-chu/"/>
    <updated>2015-07-23T17:21:17+08:00</updated>
    <id>http://blog.zhidong.info/blog/2015/07/23/ios-hybirdkai-fa-webji-chu</id>
    <content type="html"><![CDATA[<p>Hybird开发就是native和web混合开发。他有两方面的优势：跨平台和更新快。
他同时涉及到web开发和native开发。
这里简单讲讲web开发。</p>

<ul>
<li>Web常用目录结构:</li>
</ul>


<p>[name].html 页面文件</p>

<p>style.css 主样式文件</p>

<p>m-style.css 移动平台主样式文件</p>

<p>img/ 图片目录</p>

<p>js/ javascript文件目录</p>

<p>css/ css文件目录</p>

<!-- more -->


<ul>
<li>html结构示意：
<code>
&lt;html&gt;
&lt;head&gt;
 &lt;meta charset="utf-8"&gt;
 &lt;title&gt;抢红包&lt;/title&gt;
 &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
 &lt;link href="m-style.css" rel="stylesheet" /&gt;
 &lt;script src="../vendor/jquery.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="topbk"&gt;
     &lt;img src="img/packet_bg@2x.png" width="100%"&gt;
     &lt;p class="top_title"&gt;红包，先抢先得！&lt;/p&gt;
   &lt;div class="packet_long"&gt;
     &lt;div id="head_icon"&gt;&lt;/div&gt;
     &lt;div id="scramble_button"&gt;光速抢&lt;/div&gt;
     &lt;p id="packet_history"&gt;看看大家的手气&gt;&lt;/p&gt;
   &lt;/div&gt;
&lt;/div&gt;
 &lt;div class="packet_rules"&gt;
 &lt;p&gt;
   红包规则：
 &lt;/p&gt;
 &lt;p&gt;
   1.手机绑定用户专享； &lt;br&gt;
   2.每个红包，每个账户限领一次；
 &lt;/p&gt;
&lt;/div&gt;
 &lt;script src="nativeBridge.js"&gt;&lt;/script&gt;
 &lt;script src="app.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></li>
</ul>


<p><code>&lt;head&gt;</code>段声明页面属性、包含CSS文件、js文件。head会在body前被加载，一些需要预先加载的文件可以放在head中。
<code>&lt;body&gt;</code>段是页面内容
<code>&lt;p class="top_title"&gt;</code>p是段落元素, <code>class="top_title"</code>是元素属性，指定了该元素的类。
<code>&lt;div id="head_icon"&gt;</code>div是块元素， <code>id="head_icon"</code>指定了元素的id.
<code>&lt;img src="img/packet_bg@2x.png"&gt;</code>img是图像元素, 这里通过src属性指定了该图像的图片地址。</p>

<ul>
<li>CSS结构示意：</li>
</ul>


<pre><code>html {
    height: 100%;
}
body {
    min-width: 320px;
    margin: 0;padding: 0;
    background-color:#FCECD3;
}

.topbk{
    text-align: center;
}
#scramble_button{
    position: absolute;

    background: url(img/packet_button@2x.png) no-repeat;
    background-size: 100% 100%;

    top:150px;
    left:50%;
    width:180px;
    height:27px;
    margin-left:-40%;
    padding-top:10px;
}
</code></pre>

<p>   这是CSS样式的基本语法
   &ldquo;XXX"是元素选择器，选择所有XXX元素。
   &rdquo;.XXX"是类选择器，选择所有class=XXX的元素。
   &ldquo;#XXX"是id选择器，选择所有id=XXX的元素。</p>

<ul>
<li><p>js结构示意
js可以独立成js文件，也可以嵌入在html页面中。</p></li>
<li><p>引用js文件:
<code>
 &lt;script src="../vendor/jquery.js"&gt;&lt;/script&gt;
</code></p></li>
<li><p>内嵌js：
<code>
&lt;script&gt;
require(['app/packet_history'], function(model) {
  model.init();
});
&lt;/script&gt;
</code></p></li>
</ul>


<p> 因为浏览器会按顺序解析标签，将script放到body的最后可以防止script的加载阻塞整个页面的渲染。</p>

<ul>
<li>Web技术（html,css,javascript）参考网站：</li>
</ul>


<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p>

<p> <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p>

<ul>
<li>使用jquery：</li>
</ul>


<p> <a href="http://jquery.com/">jquery</a>是一个极通用的JavaScript库，通过他提供的选择器和封装的功能函数，可以大大简化web开发。</p>

<p> jquery初始化后，定义全局变量$符号作为jquery对象的简写。</p>

<p> 简单示例：
<code>
$(document).ready(function(){
  $("button").click(function(){
    $("p").hide();
  });
});
</code>
这段代码功能：当页面里有按钮被点击后，隐藏所有的段落元素。</p>

<ul>
<li>jquery选择器</li>
</ul>


<p>  $(&ldquo;p&rdquo;) 选取所有 p 元素。</p>

<p>  $(&lsquo;.more&rsquo;) 选取class=&ldquo;more"的元素</p>

<p>  $(&lsquo;#scrumble_button&rsquo;) 选取 id=&ldquo;scrumble_button"的元素</p>

<ul>
<li>ajax请求</li>
</ul>


<pre><code>  $.ajax({
     url: '...',
     type: 'POST',
     dataType: 'json',
     data: {pkgId: '1'},
     success:function(data){
         //解析返回数据
     }
     error:function(request, description, exception) {

     }
 })
</code></pre>

<p> <a href="http://www.w3school.com.cn/jquery/">jquery中文学习地址</a></p>

<ul>
<li>js模块化</li>
</ul>


<p> javascript本身没有提供模块化的功能，所有的js代码都在全局命名空间运行，并且不支持依赖关系。
 幸好我们有第三方可框架可以给我们提供模块化功能。目前主流的模块化规范有两种。</p>

<ul>
<li>AMD</li>
</ul>


<p>  <a href="http://www.requirejs.cn/">RequireJS</a></p>

<ul>
<li>CMD</li>
</ul>


<p>  <a href="http://seajs.org/docs/">SeaJS</a></p>

<p> <a href="http://justineo.github.io/singles/writing-modular-js/">js模块化参考</a></p>

<ul>
<li>Apache Tomcat使用</li>
<li>到其<a href="http://tomcat.apache.org/">官网</a>下载最新安装包，</li>
<li>解压后运行bin/startup.sh就会启动tomcat服务器。</li>
<li>如果之前没有配置过java的话，你可能需要配置JAVA_HOME环境变量：
<code>
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk***/Contents/Home
</code></li>
<li>将网页拷贝到webapps中，这样我们的网页就可以通过url远程访问。本例地址：<code>http://127.0.0.1:8080/wap/test\_packet/packet.html</code></li>
</ul>

]]></content>
  </entry>
  
</feed>
